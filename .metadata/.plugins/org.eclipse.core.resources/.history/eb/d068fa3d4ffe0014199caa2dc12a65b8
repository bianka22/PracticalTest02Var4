package ro.pub.cs.systems.pdsd.practicaltest02var04.networkingthreads;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.HashMap;

import org.apache.http.client.HttpClient;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;

import ro.pub.cs.systems.pdsd.practicaltest02var04.general.Constants;
import ro.pub.cs.systems.pdsd.practicaltest02var04.general.Utilities;
import android.util.Log;

public class CommunicationThread extends Thread {
	
	private ServerThread serverThread;
	private Socket       socket;
	
	public CommunicationThread(ServerThread serverThread, Socket socket) {
		this.serverThread = serverThread;
		this.socket       = socket;
	}
	
	@Override
	public void run() {
		if (socket != null) {
			try {
				BufferedReader bufferedReader = Utilities.getReader(socket);
				PrintWriter    printWriter    = Utilities.getWriter(socket);
				if (bufferedReader != null && printWriter != null) {
					Log.i(Constants.TAG, "[COMMUNICATION THREAD] Waiting for parameters from client (city / information type)!");
					
					String url_needed = bufferedReader.readLine();
					HashMap<String, String> data = serverThread.getData();
					String pageContent = null;
					if (url_needed != null && !url_needed.isEmpty()) {
						
						if (data.containsKey(url_needed)) {
							
							Log.i(Constants.TAG, "[COMMUNICATION THREAD] Getting the information from the cache...");
							pageContent = data.get(url_needed);
							
						} else {
							Log.i(Constants.TAG, "[COMMUNICATION THREAD] Getting the information from the webservice...");
							
							HttpClient httpClient = new DefaultHttpClient();
							HttpGet httpPost = new HttpGet(url_needed);
							
							ResponseHandler<String> responseHandler = new BasicResponseHandler();
							String pageSourceCode = httpClient.execute(httpPost, responseHandler);
							
							if (pageSourceCode != null) {
										pageContent = pageSourceCode;
										serverThread.setData(url_needed, pageSourceCode);
									
									
							
					} else {
						Log.e(Constants.TAG, "[COMMUNICATION THREAD] Error getting the information from the webservice!");
					}
						
						printWriter.println(pageContent);
						printWriter.flush();
					} else {
								Log.e(Constants.TAG, "[COMMUNICATION THREAD] Error getting the information from the webservice!");
					}
											
				} else {
					Log.e(Constants.TAG, "[COMMUNICATION THREAD] BufferedReader / PrintWriter are null!");
				}
				socket.close();
			} catch (IOException ioException) {
				Log.e(Constants.TAG, "[COMMUNICATION THREAD] An exception has occurred: " + ioException.getMessage());
				if (Constants.DEBUG) {
					ioException.printStackTrace();
				}
			}
		} else {
			Log.e(Constants.TAG, "[COMMUNICATION THREAD] Socket is null!");
		}
	}

}
